"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#django가 생각하는 base directory


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'habn4rrles&&chtya9ssi=0)78q^5%nj&r-%16m@yv@+%1j+oi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
#나중에 install할 때 그 domain name으로 접근 가능. 지금은 아무거나 접근 가능


# Application definition

INSTALLED_APPS = [ #기본 앱이 등록돼잇으며 내가 앱을 등록해야한다. ex)polls앱 추가!
    #여기서 기본적으로 필요한 데이터베이스를 넣어야하는 앱을 만들었기 때문에 이거에 대한 migration을 만들어야한다.
    #근데 이미 만들어져 있음 python manage.py migrate하면 admin,auth등이 migrate 했다는 걸 볼 수 있다.
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth', #인지하는거
    'django.contrib.contenttypes', #contenttype 알아내는 것
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

]

MIDDLEWARE = [#install 될 middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls' #mysite.urls에 존재

TEMPLATES = [ 
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],#템블릿 만들면 어디에 위치시킬지 여기다 적어 넣음.여기에 추가한 템플릿을 검색하라
        'APP_DIRS': True, #앱 dir에서도 검색할거냐? polls밑에 디렉토리 만들기
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = { #현재 default됨
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 
        # db는 base_dir밑에 db.sqlite3이름으로 있다.
        # 슬래쉬나 백 슬래쉬보단 os.path.join으로 써야 플랫폼에 independent하게 diretory path를 쓸 수 있는 방법.
        # 리눅스일수도 윈도우일수도 다들 컴퓨터마다 다르기때문
        #뿐만 아니라 대형 데이터베이스(오라클 등) user, password, host등이 더 필요하다. 따라서 필요할 때 여기다 포함시켜야 함.
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul' #우리는 서울!

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
